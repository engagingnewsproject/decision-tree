"use strict";function Tree(t){function e(e){var i=JSON.parse(e);r=i,n="start",o=i.starts[0].start_id;var s=window.TreeTemplates.tree,a=s(i);t.container.innerHTML=a}var r,n,o;if("string"!=typeof t.slug)throw new Error("Tree slug is required must be a string.");if("object"!==_typeof(t.container))throw new Error("Tree container must be an object. Try `container: document.getElementById(your-id)`.");this.getData=function(){return r},this.getState=function(){return n},this.getStateID=function(){return o},this.setState=function(t){n=t},this.setStateID=function(t){o=t},getTreeData(t.slug,"http://dev/decision-tree/api/v1/trees/"+t.slug+"/compiled?minfied=true").then(e).catch(handleTreeDataError)}function getTreeData(t,e){return new Promise(function(t,r){var n=new XMLHttpRequest;n.overrideMimeType("application/json"),n.open("GET",e,!0),n.onload=function(){200===n.status?t(n.response):r(Error("Tree could not be loaded:"+n.statusText))},n.onerror=function(){r(Error("There was a network error."))},n.send()})}function handleTreeDataError(t){throw console.log(t),new Error("Tree data could not be loaded.")}Handlebars.registerHelper("environment",function(t){return"has-js"}),Handlebars.registerHelper("group_start",function(t,e,r,n){for(var o=0;o<r.length;o++)if(r[o].group_id===e)return r[o].questions[0]===t?n.fn(r[o].title):"";return""}),Handlebars.registerHelper("group_end",function(t,e,r,n){for(var o=0;o<r.length;o++)if(r[o].group_id===e){var i=r[o].questions;return i[i.length-1]===t?n.fn(this):""}return""}),Handlebars.registerHelper("group_title",function(t,e,r){for(var n=0;n<e.length;n++)if(e[n].group_id===t)return e[n].title;return""});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Tree.prototype.getQuestion=function(t){return questionIndex=this.getIndexBy(this.getData(),"question_id",t),question=this.data.questions[questionIndex],question},Tree.prototype.getDataByType=function(t,e){var r=void 0,n=void 0,o=void 0;if(n=["question","group","end","start"],!n.includes(t))throw new Error("Allowed getDataByType types are "+n.toString());return o=this.getData(),o=o[t+"s"],void 0!==e&&(r=this.getIndexBy(o,t+"_id",e),o=o[r]),o},Tree.prototype.getQuestions=function(t){return void 0!==t?this.getDataByType("question",t):this.getDataByType("question")},Tree.prototype.getStarts=function(t){return void 0!==t?this.getDataByType("start",t):this.getDataByType("start")},Tree.prototype.getEnds=function(t){return void 0!==t?this.getDataByType("end",t):this.getDataByType("end")},Tree.prototype.getGroups=function(t){return void 0!==t?this.getDataByType("group",t):this.getDataByType("group")},Tree.prototype.getOptions=function(t,e){var r=void 0,n=void 0,o=void 0;return o=this.getQuestions(t),void 0!==e?(n=this.getIndexBy(o.options,"option_id",e),r=o.options[n]):r=o.options,r},Tree.prototype.getIndexBy=function(t,e,r){for(var n=0;n<t.length;n++)if(t[n][e]==r)return n;return-1};var Trees=[];